[
  {
    "objectID": "Project 2.html",
    "href": "Project 2.html",
    "title": "ST558_2024_Project2",
    "section": "",
    "text": "Welcome to the beach city of Melbourne, Australia! For this project let’s take a look at the interesting housing market data. I chose this data set because data contains the date data, which is really good for visulization using an Rshiny App!\nI have downloaded the Melbourne housing data from [here] (http://www.kaggle.com/datasets/anthonypino/melbourne-housing-market): . Let’s first import data and make some summaries.\n\nlibrary (dplyr) \n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary (tidyverse) \n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary (ggplot2)\nlibrary (gridExtra)\n\n\nAttaching package: 'gridExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nlibrary (pheatmap)\n\nWarning: package 'pheatmap' was built under R version 4.3.2\n\nsetwd (\"C:/NCSU/Statistics/ST558/2024/ST558_2024-Project 2\")  \nMelHousing &lt;- read.csv (\"MELBOURNE_HOUSE_PRICES.csv\") |&gt; as.tibble () \n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nMelHousing \n\n# A tibble: 63,023 × 13\n   Suburb   Address Rooms Type    Price Method SellerG Date  Postcode Regionname\n   &lt;chr&gt;    &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;     \n 1 Abbotsf… 49 Lit…     3 h     1490000 S      Jellis  1/04…     3067 Northern …\n 2 Abbotsf… 59A Tu…     3 h     1220000 S      Marsha… 1/04…     3067 Northern …\n 3 Abbotsf… 119B Y…     3 h     1420000 S      Nelson  1/04…     3067 Northern …\n 4 Aberfel… 68 Vid…     3 h     1515000 S      Barry   1/04…     3040 Western M…\n 5 Airport… 92 Cly…     2 h      670000 S      Nelson  1/04…     3042 Western M…\n 6 Airport… 4/32 E…     2 t      530000 S      Jellis  1/04…     3042 Western M…\n 7 Airport… 3/74 H…     2 u      540000 S      Barry   1/04…     3042 Western M…\n 8 Airport… 1/26 H…     3 h      715000 SP     Nelson  1/04…     3042 Western M…\n 9 Albanva… 1 Jack…     6 h          NA PI     hockin… 1/04…     3021 Western M…\n10 Albert … 18 Mil…     3 h     1925000 S      Cayzer  1/04…     3206 Southern …\n# ℹ 63,013 more rows\n# ℹ 3 more variables: Propertycount &lt;int&gt;, Distance &lt;dbl&gt;, CouncilArea &lt;chr&gt;\n\nstr(MelHousing)\n\ntibble [63,023 × 13] (S3: tbl_df/tbl/data.frame)\n $ Suburb       : chr [1:63023] \"Abbotsford\" \"Abbotsford\" \"Abbotsford\" \"Aberfeldie\" ...\n $ Address      : chr [1:63023] \"49 Lithgow St\" \"59A Turner St\" \"119B Yarra St\" \"68 Vida St\" ...\n $ Rooms        : int [1:63023] 3 3 3 3 2 2 2 3 6 3 ...\n $ Type         : chr [1:63023] \"h\" \"h\" \"h\" \"h\" ...\n $ Price        : int [1:63023] 1490000 1220000 1420000 1515000 670000 530000 540000 715000 NA 1925000 ...\n $ Method       : chr [1:63023] \"S\" \"S\" \"S\" \"S\" ...\n $ SellerG      : chr [1:63023] \"Jellis\" \"Marshall\" \"Nelson\" \"Barry\" ...\n $ Date         : chr [1:63023] \"1/04/2017\" \"1/04/2017\" \"1/04/2017\" \"1/04/2017\" ...\n $ Postcode     : int [1:63023] 3067 3067 3067 3040 3042 3042 3042 3042 3021 3206 ...\n $ Regionname   : chr [1:63023] \"Northern Metropolitan\" \"Northern Metropolitan\" \"Northern Metropolitan\" \"Western Metropolitan\" ...\n $ Propertycount: int [1:63023] 4019 4019 4019 1543 3464 3464 3464 3464 1899 3280 ...\n $ Distance     : num [1:63023] 3 3 3 7.5 10.4 10.4 10.4 10.4 14 3 ...\n $ CouncilArea  : chr [1:63023] \"Yarra City Council\" \"Yarra City Council\" \"Yarra City Council\" \"Moonee Valley City Council\" ...\n\n\n\n\n\n\nFrom the function str(), we could see the data set has about 63k records of housing, with 13 variables. There are 8 categorical variables and 5 quantitative variables. For the categorical variables, some are very interesting. For example, the variable “Regionname” indicates which region a specific housing is seated in, the “Type” variable showed the type of housing.\n\nMelHousing &lt;- MelHousing |&gt; mutate (RegionF = as.factor (Regionname),\n                      TypeF = factor (Type, \n                                      levels = c (\"h\", \"t\", \"u\"),\n                                      labels = c (\"house\", \"townhouse\",\"duplex\")))\n\nMelHousing |&gt; group_by(RegionF) |&gt; drop_na (RegionF) |&gt; summarize (count = n())\n\n# A tibble: 8 × 2\n  RegionF                    count\n  &lt;fct&gt;                      &lt;int&gt;\n1 Eastern Metropolitan       10396\n2 Eastern Victoria             564\n3 Northern Metropolitan      16781\n4 Northern Victoria            556\n5 South-Eastern Metropolitan  5212\n6 Southern Metropolitan      17559\n7 Western Metropolitan       11717\n8 Western Victoria             238\n\nMelHousing |&gt; group_by(TypeF) |&gt; drop_na (TypeF) |&gt; summarize (count = n())\n\n# A tibble: 3 × 2\n  TypeF     count\n  &lt;fct&gt;     &lt;int&gt;\n1 house     45053\n2 townhouse  6315\n3 duplex    11655\n\n\nSo there are 8 different city area in Melbourn. Among those different regions, the Southern Metropolitan and the Northern Metropolitan clearly had the most number of housing options and there are three different types of housing: house (h), townhouse (t) and duplex (u). How about making a two-way contingency table?\n\nMelHousing |&gt; group_by (RegionF, TypeF) |&gt; drop_na (RegionF, TypeF) |&gt; summarize (count = n()) |&gt; pivot_wider (names_from = RegionF, values_from = count) |&gt; as.data.frame()\n\n`summarise()` has grouped output by 'RegionF'. You can override using the\n`.groups` argument.\n\n\n      TypeF Eastern Metropolitan Eastern Victoria Northern Metropolitan\n1     house                 8217              540                 11984\n2 townhouse                  914               12                  1738\n3    duplex                 1265               12                  3059\n  Northern Victoria South-Eastern Metropolitan Southern Metropolitan\n1               544                       3992                 10281\n2                 2                        530                  2098\n3                10                        690                  5180\n  Western Metropolitan Western Victoria\n1                 9266              229\n2                 1021               NA\n3                 1430                9\n\n\nThis table lists the number of different types of housing in different district. It is interesting to see not only the number of housing, but how different areas of a city tend to favor a certain type of housing instead of other types. For example the ratio between house and duplex is close to 7:1 in the Eastern metro region, but is close to 2:1 in the southern metro region. The housing type (and probably density) between those two regions must be very different.\n\nMelHousing &lt;- MelHousing |&gt; mutate (RoomsF = as.factor (Rooms))\nMelHousing |&gt; group_by(RoomsF) |&gt; drop_na (RoomsF) |&gt; summarize (count = n())\n\n# A tibble: 14 × 2\n   RoomsF count\n   &lt;fct&gt;  &lt;int&gt;\n 1 1       2111\n 2 2      13248\n 3 3      27950\n 4 4      15747\n 5 5       3434\n 6 6        424\n 7 7         61\n 8 8         29\n 9 9          5\n10 10         7\n11 11         1\n12 12         4\n13 16         1\n14 31         1\n\nMelHousing |&gt; group_by (RegionF, RoomsF) |&gt; drop_na (RegionF, RoomsF) |&gt; summarize (count = n()) |&gt; pivot_wider (names_from = RegionF, values_from = count) |&gt; as.data.frame()\n\n`summarise()` has grouped output by 'RegionF'. You can override using the\n`.groups` argument.\n\n\n   RoomsF Eastern Metropolitan Eastern Victoria Northern Metropolitan\n1       1                   43                4                   763\n2       2                 1242               22                  4366\n3       3                 4574              255                  7765\n4       4                 3424              230                  3308\n5       5                  969               45                   497\n6       6                  120                7                    59\n7       7                   14               NA                    13\n8       8                    6                1                     5\n9       9                    1               NA                     1\n10     10                    1               NA                     2\n11     16                    1               NA                    NA\n12     31                    1               NA                    NA\n13     11                   NA               NA                     1\n14     12                   NA               NA                     1\n   Northern Victoria South-Eastern Metropolitan Southern Metropolitan\n1                  3                         50                  1024\n2                 13                        692                  4907\n3                270                       2669                  6322\n4                221                       1423                  4127\n5                 39                        327                  1042\n6                  9                         38                   107\n7                  1                          6                    17\n8                 NA                          4                     7\n9                 NA                          1                     2\n10                NA                          1                     3\n11                NA                         NA                    NA\n12                NA                         NA                    NA\n13                NA                         NA                    NA\n14                NA                          1                     1\n   Western Metropolitan Western Victoria\n1                   223                1\n2                  1992               14\n3                  5932              163\n4                  2963               51\n5                   509                6\n6                    82                2\n7                    10               NA\n8                     6               NA\n9                    NA               NA\n10                   NA               NA\n11                   NA               NA\n12                   NA               NA\n13                   NA               NA\n14                   NA                1\n\n\nThe variable “rooms” is a quantitative one, but we could anyway coerce So if we make a 2-way contigency table on “Region” and “Rooms” same thing could be observed here: Dueling units with 1 room only are very rare in the Eastern Metro region (less than 1%), while it constitutes quite a fraction (about 7%) in the Southern Metropolitan region.\n\n\n\nThere are five numeric variables: “Rooms”, “Price”, “Postcode”, “Property count” and “Distance”, while Postcode is not a real “quantitative” variable. Let’s make a summary first on the rest four variables.\n\nMelHousingnum &lt;- MelHousing |&gt; select (Rooms, Price, Propertycount, Distance)\nsummary (MelHousingnum)\n\n     Rooms            Price          Propertycount      Distance    \n Min.   : 1.000   Min.   :   85000   Min.   :   39   Min.   : 0.00  \n 1st Qu.: 3.000   1st Qu.:  620000   1st Qu.: 4380   1st Qu.: 7.00  \n Median : 3.000   Median :  830000   Median : 6795   Median :11.40  \n Mean   : 3.111   Mean   :  997898   Mean   : 7618   Mean   :12.68  \n 3rd Qu.: 4.000   3rd Qu.: 1220000   3rd Qu.:10412   3rd Qu.:16.70  \n Max.   :31.000   Max.   :11200000   Max.   :21650   Max.   :64.10  \n                  NA's   :14590                                     \n\n\nIt is interesting to see the housing price in different city regions, we could make a data summary on this accordingly.\n\nMelHousing |&gt; group_by(RegionF) |&gt; drop_na (Price) |&gt;\n  summarize (across(Price,\n             .fns = list (\"Mean\" = mean,\n                          \"Median\" = median,\n                          \"Variation\" = var,\n                          \"IQR\" = IQR)))\n\n# A tibble: 8 × 5\n  RegionF                    Price_Mean Price_Median Price_Variation Price_IQR\n  &lt;fct&gt;                           &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n1 Eastern Metropolitan         1071837.       990000   172432756641.    477500\n2 Eastern Victoria              689369.       670000    48459258654.    256125\n3 Northern Metropolitan         823720.       715000   173185927463.    396375\n4 Northern Victoria             643082.       590000    72565913591.    261500\n5 South-Eastern Metropolitan    846235.       780000   129326955995.    350000\n6 Southern Metropolitan        1373222.      1230000   688168757237.    965000\n7 Western Metropolitan          800516.       700000   138791621606.    372000\n8 Western Victoria              412026.       400000    15046263473.    107500\n\n\nTo see the distribution of those four variables, including the number of rooms in a house, the price of the house, the property counts of the Suburbs and the houses’ distance from Melbourn CBD, we could make four density plot and put them together.\n\nroomsp &lt;- ggplot (MelHousingnum, aes (x = Rooms)) +\n  geom_histogram(color = \"black\", fill = \"skyblue\", alpha = 0.5) +\n  labs (x = \"Rooms\")\npricep &lt;- ggplot (MelHousingnum, aes (x = Price)) +\n  geom_histogram(color = \"black\", fill = \"lightgreen\", alpha = 0.5) +\n  labs (x = \"Price\")\npropertycountp &lt;- ggplot (MelHousingnum, aes (x = Propertycount)) +\n  geom_histogram(color = \"black\", fill = \"pink\", alpha = 0.5) +\n  labs (x = \"Property count\")\nDistancep &lt;- ggplot (MelHousingnum, aes (x = Distance)) +\n  geom_histogram(color = \"black\", fill = \"lightyellow\", alpha = 0.5) +\n  labs (x = \"Distance from CBD\")\ngrid.arrange(roomsp, pricep, propertycountp, Distancep, ncol = 2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 14590 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThey all look like gamma distribution with different shape and scale paramaters.\nSince the dataset has a date data, let’s pick it up and plot a time-series plot on those numeric variables. So it is basically a line plot\n\nMelHousing$Date &lt;- as.Date (MelHousing$Date, format = \"%m/%d/%Y\")\ndaily_avg_price &lt;- MelHousing |&gt; group_by(Date) |&gt; summarize (price_avg = mean (Price, na.rm = TRUE))\nggplot (daily_avg_price, aes (x = Date, y = price_avg)) +\n  geom_line (color = \"black\") +\n  labs (title = \"Average Housing Price Over Time\", x = \"Date\", y = \"Average Melbourne Housing price\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThere is no significant trend in the average price throughout the years. Meanwhile we could plot the same time-plot based on different Region in Melbourne.\n\ndaily_avg_price &lt;- MelHousing |&gt; group_by(Date, RegionF) |&gt; \n  summarize (price_avg = mean (Price, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\nggplot (daily_avg_price, aes (x = Date, y = price_avg, color = RegionF)) +\n  geom_line (size = 0.7) +\n  labs (title = \"Housing Price Over Time by different regions\", \n        x= \"Date\", \n        y = \"Average Melbourne Housing price\",\n        color = \"Region\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nIt would be also very interesting to look at the interplay between housing price and the distance to CBD. Use ggplot to plot the dot plot using x = “Distance” and y = “Price”. In addtion, we could use rooms as a factor to make a facet grid. Note most of the housing units have room number less than or equal to 6\n\nMelHousing_room6 &lt;- MelHousing |&gt; filter (Rooms &lt;= 6)\n\nggplot (MelHousing_room6, aes (x = Distance, y = Price)) +\n  geom_point (color = \"purple\", alpha = 0.5, size = 0.5) +\n  labs (x = \"Distance to CBD\", y = \"Housing price\") +\n  facet_wrap(~Rooms)\n\nWarning: Removed 14549 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe could see no matter how many rooms, the peak housing price comes at about somewhere around 5 miles to CBD. For this we could add another dimension of facet using facet_grid function.\n\nMelHousing_room6_metro &lt;- MelHousing_room6 |&gt; filter (grepl (\"Metropolitan\", Regionname)) |&gt; filter (!grepl (\"South-Eastern\",Regionname))\n\nggplot (MelHousing_room6_metro, aes (x = Distance, y = Price)) +\n  geom_point (color = \"goldenrod\", alpha = 0.5, size = 0.5) +\n  labs (x = \"Distance to CBD\", y = \"Housing price\") +\n  facet_grid(RegionF~Rooms)\n\nWarning: Removed 13007 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nIt is interesting to see although the housing price in the Eastern and Southern metropolitan areas were similar among housing units with 1-3 bedrooms, southern metro neighbourhoods are much pricier at 4-6 bedroom houses. In fact there is a single house in the south metropolitan area that tops all the prices, which is a 4 bedroom house.\n\n\nIt is interesting to look at the price changes of housing in different region at different time points. To make a heatmap meaningful, we first need to sort out the average price data for each council area at each time point, and then do normalization.\n\ndaily_avg_price_regionF &lt;- MelHousing |&gt; group_by(Date, RegionF) |&gt; \n  summarize (price_avg = mean (Price, na.rm = TRUE)) |&gt;\n  pivot_wider(names_from = RegionF, values_from = price_avg) |&gt;\n  drop_na()\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\ndaily_avg_price_regionF\n\n# A tibble: 26 × 9\n# Groups:   Date [26]\n   Date       `Eastern Metropolitan` `Eastern Victoria` `Northern Metropolitan`\n   &lt;date&gt;                      &lt;dbl&gt;              &lt;dbl&gt;                   &lt;dbl&gt;\n 1 2016-03-12               1111180.            596750                  780858.\n 2 2016-04-02                981786.            743000                  610079.\n 3 2016-08-10               1075292.            519333.                 751397.\n 4 2016-10-12               1000839.            642333.                 780504.\n 5 2017-01-04               1147026.            535333.                 865783.\n 6 2017-01-07               1053513.            695625                  866154.\n 7 2017-03-06               1073682.            641000                  876006.\n 8 2017-03-09               1132762.            758200                  878903.\n 9 2017-04-03               1029440.            702800                  860875.\n10 2017-04-11               1114500             725000                  806091.\n# ℹ 16 more rows\n# ℹ 5 more variables: `Northern Victoria` &lt;dbl&gt;,\n#   `South-Eastern Metropolitan` &lt;dbl&gt;, `Southern Metropolitan` &lt;dbl&gt;,\n#   `Western Metropolitan` &lt;dbl&gt;, `Western Victoria` &lt;dbl&gt;\n\n\nThen we need to normalize the data using the function mutate (across(everything(), ~./first (.)))\n\nfirst_values &lt;- sapply(daily_avg_price_regionF[-1], first)\n\ndaily_avg_price_regionF_normalized &lt;- daily_avg_price_regionF |&gt;\n  mutate (across (everything(), ~. / first_values[cur_column()]))\n  \ndaily_avg_price_regionF_normalized\n\n# A tibble: 26 × 9\n# Groups:   Date [26]\n   Date       `Eastern Metropolitan` `Eastern Victoria` `Northern Metropolitan`\n   &lt;date&gt;                      &lt;dbl&gt;              &lt;dbl&gt;                   &lt;dbl&gt;\n 1 2016-03-12                  1                  1                       1    \n 2 2016-04-02                  0.884              1.25                    0.781\n 3 2016-08-10                  0.968              0.870                   0.962\n 4 2016-10-12                  0.901              1.08                    1.00 \n 5 2017-01-04                  1.03               0.897                   1.11 \n 6 2017-01-07                  0.948              1.17                    1.11 \n 7 2017-03-06                  0.966              1.07                    1.12 \n 8 2017-03-09                  1.02               1.27                    1.13 \n 9 2017-04-03                  0.926              1.18                    1.10 \n10 2017-04-11                  1.00               1.21                    1.03 \n# ℹ 16 more rows\n# ℹ 5 more variables: `Northern Victoria` &lt;dbl&gt;,\n#   `South-Eastern Metropolitan` &lt;dbl&gt;, `Southern Metropolitan` &lt;dbl&gt;,\n#   `Western Metropolitan` &lt;dbl&gt;, `Western Victoria` &lt;dbl&gt;\n\n\nNow you could see the housing price has been normalized according to the first value of each column to reflect their relative changes. I will continue using the pheatmap () function.\n\nDAPRN_heatmap &lt;- daily_avg_price_regionF_normalized |&gt; column_to_rownames(var = \"Date\")\n\npheatmap (DAPRN_heatmap,\n          cluster_rows = FALSE,\n          treeheight_col = 20,\n          color = colorRampPalette(c(\"blue\", \"white\", \"red\"))(50),\n          main = \"Housing Price Heatmap\",\n          cellwidth = 16,\n          cellheight = 8,\n          angle_col = 45)\n\n\n\n\n\n\n\n\nFrom this heatmap you could roughly see housing price actually followed different trending at different areas. Now make an App to enable end users to visualize our data set!"
  },
  {
    "objectID": "Project 2.html#data-summary",
    "href": "Project 2.html#data-summary",
    "title": "ST558_2024_Project2",
    "section": "",
    "text": "From the function str(), we could see the data set has about 63k records of housing, with 13 variables. There are 8 categorical variables and 5 quantitative variables. For the categorical variables, some are very interesting. For example, the variable “Regionname” indicates which region a specific housing is seated in, the “Type” variable showed the type of housing.\n\nMelHousing &lt;- MelHousing |&gt; mutate (RegionF = as.factor (Regionname),\n                      TypeF = factor (Type, \n                                      levels = c (\"h\", \"t\", \"u\"),\n                                      labels = c (\"house\", \"townhouse\",\"duplex\")))\n\nMelHousing |&gt; group_by(RegionF) |&gt; drop_na (RegionF) |&gt; summarize (count = n())\n\n# A tibble: 8 × 2\n  RegionF                    count\n  &lt;fct&gt;                      &lt;int&gt;\n1 Eastern Metropolitan       10396\n2 Eastern Victoria             564\n3 Northern Metropolitan      16781\n4 Northern Victoria            556\n5 South-Eastern Metropolitan  5212\n6 Southern Metropolitan      17559\n7 Western Metropolitan       11717\n8 Western Victoria             238\n\nMelHousing |&gt; group_by(TypeF) |&gt; drop_na (TypeF) |&gt; summarize (count = n())\n\n# A tibble: 3 × 2\n  TypeF     count\n  &lt;fct&gt;     &lt;int&gt;\n1 house     45053\n2 townhouse  6315\n3 duplex    11655\n\n\nSo there are 8 different city area in Melbourn. Among those different regions, the Southern Metropolitan and the Northern Metropolitan clearly had the most number of housing options and there are three different types of housing: house (h), townhouse (t) and duplex (u). How about making a two-way contingency table?\n\nMelHousing |&gt; group_by (RegionF, TypeF) |&gt; drop_na (RegionF, TypeF) |&gt; summarize (count = n()) |&gt; pivot_wider (names_from = RegionF, values_from = count) |&gt; as.data.frame()\n\n`summarise()` has grouped output by 'RegionF'. You can override using the\n`.groups` argument.\n\n\n      TypeF Eastern Metropolitan Eastern Victoria Northern Metropolitan\n1     house                 8217              540                 11984\n2 townhouse                  914               12                  1738\n3    duplex                 1265               12                  3059\n  Northern Victoria South-Eastern Metropolitan Southern Metropolitan\n1               544                       3992                 10281\n2                 2                        530                  2098\n3                10                        690                  5180\n  Western Metropolitan Western Victoria\n1                 9266              229\n2                 1021               NA\n3                 1430                9\n\n\nThis table lists the number of different types of housing in different district. It is interesting to see not only the number of housing, but how different areas of a city tend to favor a certain type of housing instead of other types. For example the ratio between house and duplex is close to 7:1 in the Eastern metro region, but is close to 2:1 in the southern metro region. The housing type (and probably density) between those two regions must be very different.\n\nMelHousing &lt;- MelHousing |&gt; mutate (RoomsF = as.factor (Rooms))\nMelHousing |&gt; group_by(RoomsF) |&gt; drop_na (RoomsF) |&gt; summarize (count = n())\n\n# A tibble: 14 × 2\n   RoomsF count\n   &lt;fct&gt;  &lt;int&gt;\n 1 1       2111\n 2 2      13248\n 3 3      27950\n 4 4      15747\n 5 5       3434\n 6 6        424\n 7 7         61\n 8 8         29\n 9 9          5\n10 10         7\n11 11         1\n12 12         4\n13 16         1\n14 31         1\n\nMelHousing |&gt; group_by (RegionF, RoomsF) |&gt; drop_na (RegionF, RoomsF) |&gt; summarize (count = n()) |&gt; pivot_wider (names_from = RegionF, values_from = count) |&gt; as.data.frame()\n\n`summarise()` has grouped output by 'RegionF'. You can override using the\n`.groups` argument.\n\n\n   RoomsF Eastern Metropolitan Eastern Victoria Northern Metropolitan\n1       1                   43                4                   763\n2       2                 1242               22                  4366\n3       3                 4574              255                  7765\n4       4                 3424              230                  3308\n5       5                  969               45                   497\n6       6                  120                7                    59\n7       7                   14               NA                    13\n8       8                    6                1                     5\n9       9                    1               NA                     1\n10     10                    1               NA                     2\n11     16                    1               NA                    NA\n12     31                    1               NA                    NA\n13     11                   NA               NA                     1\n14     12                   NA               NA                     1\n   Northern Victoria South-Eastern Metropolitan Southern Metropolitan\n1                  3                         50                  1024\n2                 13                        692                  4907\n3                270                       2669                  6322\n4                221                       1423                  4127\n5                 39                        327                  1042\n6                  9                         38                   107\n7                  1                          6                    17\n8                 NA                          4                     7\n9                 NA                          1                     2\n10                NA                          1                     3\n11                NA                         NA                    NA\n12                NA                         NA                    NA\n13                NA                         NA                    NA\n14                NA                          1                     1\n   Western Metropolitan Western Victoria\n1                   223                1\n2                  1992               14\n3                  5932              163\n4                  2963               51\n5                   509                6\n6                    82                2\n7                    10               NA\n8                     6               NA\n9                    NA               NA\n10                   NA               NA\n11                   NA               NA\n12                   NA               NA\n13                   NA               NA\n14                   NA                1\n\n\nThe variable “rooms” is a quantitative one, but we could anyway coerce So if we make a 2-way contigency table on “Region” and “Rooms” same thing could be observed here: Dueling units with 1 room only are very rare in the Eastern Metro region (less than 1%), while it constitutes quite a fraction (about 7%) in the Southern Metropolitan region.\n\n\n\nThere are five numeric variables: “Rooms”, “Price”, “Postcode”, “Property count” and “Distance”, while Postcode is not a real “quantitative” variable. Let’s make a summary first on the rest four variables.\n\nMelHousingnum &lt;- MelHousing |&gt; select (Rooms, Price, Propertycount, Distance)\nsummary (MelHousingnum)\n\n     Rooms            Price          Propertycount      Distance    \n Min.   : 1.000   Min.   :   85000   Min.   :   39   Min.   : 0.00  \n 1st Qu.: 3.000   1st Qu.:  620000   1st Qu.: 4380   1st Qu.: 7.00  \n Median : 3.000   Median :  830000   Median : 6795   Median :11.40  \n Mean   : 3.111   Mean   :  997898   Mean   : 7618   Mean   :12.68  \n 3rd Qu.: 4.000   3rd Qu.: 1220000   3rd Qu.:10412   3rd Qu.:16.70  \n Max.   :31.000   Max.   :11200000   Max.   :21650   Max.   :64.10  \n                  NA's   :14590                                     \n\n\nIt is interesting to see the housing price in different city regions, we could make a data summary on this accordingly.\n\nMelHousing |&gt; group_by(RegionF) |&gt; drop_na (Price) |&gt;\n  summarize (across(Price,\n             .fns = list (\"Mean\" = mean,\n                          \"Median\" = median,\n                          \"Variation\" = var,\n                          \"IQR\" = IQR)))\n\n# A tibble: 8 × 5\n  RegionF                    Price_Mean Price_Median Price_Variation Price_IQR\n  &lt;fct&gt;                           &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n1 Eastern Metropolitan         1071837.       990000   172432756641.    477500\n2 Eastern Victoria              689369.       670000    48459258654.    256125\n3 Northern Metropolitan         823720.       715000   173185927463.    396375\n4 Northern Victoria             643082.       590000    72565913591.    261500\n5 South-Eastern Metropolitan    846235.       780000   129326955995.    350000\n6 Southern Metropolitan        1373222.      1230000   688168757237.    965000\n7 Western Metropolitan          800516.       700000   138791621606.    372000\n8 Western Victoria              412026.       400000    15046263473.    107500\n\n\nTo see the distribution of those four variables, including the number of rooms in a house, the price of the house, the property counts of the Suburbs and the houses’ distance from Melbourn CBD, we could make four density plot and put them together.\n\nroomsp &lt;- ggplot (MelHousingnum, aes (x = Rooms)) +\n  geom_histogram(color = \"black\", fill = \"skyblue\", alpha = 0.5) +\n  labs (x = \"Rooms\")\npricep &lt;- ggplot (MelHousingnum, aes (x = Price)) +\n  geom_histogram(color = \"black\", fill = \"lightgreen\", alpha = 0.5) +\n  labs (x = \"Price\")\npropertycountp &lt;- ggplot (MelHousingnum, aes (x = Propertycount)) +\n  geom_histogram(color = \"black\", fill = \"pink\", alpha = 0.5) +\n  labs (x = \"Property count\")\nDistancep &lt;- ggplot (MelHousingnum, aes (x = Distance)) +\n  geom_histogram(color = \"black\", fill = \"lightyellow\", alpha = 0.5) +\n  labs (x = \"Distance from CBD\")\ngrid.arrange(roomsp, pricep, propertycountp, Distancep, ncol = 2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 14590 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nThey all look like gamma distribution with different shape and scale paramaters.\nSince the dataset has a date data, let’s pick it up and plot a time-series plot on those numeric variables. So it is basically a line plot\n\nMelHousing$Date &lt;- as.Date (MelHousing$Date, format = \"%m/%d/%Y\")\ndaily_avg_price &lt;- MelHousing |&gt; group_by(Date) |&gt; summarize (price_avg = mean (Price, na.rm = TRUE))\nggplot (daily_avg_price, aes (x = Date, y = price_avg)) +\n  geom_line (color = \"black\") +\n  labs (title = \"Average Housing Price Over Time\", x = \"Date\", y = \"Average Melbourne Housing price\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nThere is no significant trend in the average price throughout the years. Meanwhile we could plot the same time-plot based on different Region in Melbourne.\n\ndaily_avg_price &lt;- MelHousing |&gt; group_by(Date, RegionF) |&gt; \n  summarize (price_avg = mean (Price, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\nggplot (daily_avg_price, aes (x = Date, y = price_avg, color = RegionF)) +\n  geom_line (size = 0.7) +\n  labs (title = \"Housing Price Over Time by different regions\", \n        x= \"Date\", \n        y = \"Average Melbourne Housing price\",\n        color = \"Region\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: Removed 9 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nIt would be also very interesting to look at the interplay between housing price and the distance to CBD. Use ggplot to plot the dot plot using x = “Distance” and y = “Price”. In addtion, we could use rooms as a factor to make a facet grid. Note most of the housing units have room number less than or equal to 6\n\nMelHousing_room6 &lt;- MelHousing |&gt; filter (Rooms &lt;= 6)\n\nggplot (MelHousing_room6, aes (x = Distance, y = Price)) +\n  geom_point (color = \"purple\", alpha = 0.5, size = 0.5) +\n  labs (x = \"Distance to CBD\", y = \"Housing price\") +\n  facet_wrap(~Rooms)\n\nWarning: Removed 14549 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nWe could see no matter how many rooms, the peak housing price comes at about somewhere around 5 miles to CBD. For this we could add another dimension of facet using facet_grid function.\n\nMelHousing_room6_metro &lt;- MelHousing_room6 |&gt; filter (grepl (\"Metropolitan\", Regionname)) |&gt; filter (!grepl (\"South-Eastern\",Regionname))\n\nggplot (MelHousing_room6_metro, aes (x = Distance, y = Price)) +\n  geom_point (color = \"goldenrod\", alpha = 0.5, size = 0.5) +\n  labs (x = \"Distance to CBD\", y = \"Housing price\") +\n  facet_grid(RegionF~Rooms)\n\nWarning: Removed 13007 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nIt is interesting to see although the housing price in the Eastern and Southern metropolitan areas were similar among housing units with 1-3 bedrooms, southern metro neighbourhoods are much pricier at 4-6 bedroom houses. In fact there is a single house in the south metropolitan area that tops all the prices, which is a 4 bedroom house.\n\n\nIt is interesting to look at the price changes of housing in different region at different time points. To make a heatmap meaningful, we first need to sort out the average price data for each council area at each time point, and then do normalization.\n\ndaily_avg_price_regionF &lt;- MelHousing |&gt; group_by(Date, RegionF) |&gt; \n  summarize (price_avg = mean (Price, na.rm = TRUE)) |&gt;\n  pivot_wider(names_from = RegionF, values_from = price_avg) |&gt;\n  drop_na()\n\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n\ndaily_avg_price_regionF\n\n# A tibble: 26 × 9\n# Groups:   Date [26]\n   Date       `Eastern Metropolitan` `Eastern Victoria` `Northern Metropolitan`\n   &lt;date&gt;                      &lt;dbl&gt;              &lt;dbl&gt;                   &lt;dbl&gt;\n 1 2016-03-12               1111180.            596750                  780858.\n 2 2016-04-02                981786.            743000                  610079.\n 3 2016-08-10               1075292.            519333.                 751397.\n 4 2016-10-12               1000839.            642333.                 780504.\n 5 2017-01-04               1147026.            535333.                 865783.\n 6 2017-01-07               1053513.            695625                  866154.\n 7 2017-03-06               1073682.            641000                  876006.\n 8 2017-03-09               1132762.            758200                  878903.\n 9 2017-04-03               1029440.            702800                  860875.\n10 2017-04-11               1114500             725000                  806091.\n# ℹ 16 more rows\n# ℹ 5 more variables: `Northern Victoria` &lt;dbl&gt;,\n#   `South-Eastern Metropolitan` &lt;dbl&gt;, `Southern Metropolitan` &lt;dbl&gt;,\n#   `Western Metropolitan` &lt;dbl&gt;, `Western Victoria` &lt;dbl&gt;\n\n\nThen we need to normalize the data using the function mutate (across(everything(), ~./first (.)))\n\nfirst_values &lt;- sapply(daily_avg_price_regionF[-1], first)\n\ndaily_avg_price_regionF_normalized &lt;- daily_avg_price_regionF |&gt;\n  mutate (across (everything(), ~. / first_values[cur_column()]))\n  \ndaily_avg_price_regionF_normalized\n\n# A tibble: 26 × 9\n# Groups:   Date [26]\n   Date       `Eastern Metropolitan` `Eastern Victoria` `Northern Metropolitan`\n   &lt;date&gt;                      &lt;dbl&gt;              &lt;dbl&gt;                   &lt;dbl&gt;\n 1 2016-03-12                  1                  1                       1    \n 2 2016-04-02                  0.884              1.25                    0.781\n 3 2016-08-10                  0.968              0.870                   0.962\n 4 2016-10-12                  0.901              1.08                    1.00 \n 5 2017-01-04                  1.03               0.897                   1.11 \n 6 2017-01-07                  0.948              1.17                    1.11 \n 7 2017-03-06                  0.966              1.07                    1.12 \n 8 2017-03-09                  1.02               1.27                    1.13 \n 9 2017-04-03                  0.926              1.18                    1.10 \n10 2017-04-11                  1.00               1.21                    1.03 \n# ℹ 16 more rows\n# ℹ 5 more variables: `Northern Victoria` &lt;dbl&gt;,\n#   `South-Eastern Metropolitan` &lt;dbl&gt;, `Southern Metropolitan` &lt;dbl&gt;,\n#   `Western Metropolitan` &lt;dbl&gt;, `Western Victoria` &lt;dbl&gt;\n\n\nNow you could see the housing price has been normalized according to the first value of each column to reflect their relative changes. I will continue using the pheatmap () function.\n\nDAPRN_heatmap &lt;- daily_avg_price_regionF_normalized |&gt; column_to_rownames(var = \"Date\")\n\npheatmap (DAPRN_heatmap,\n          cluster_rows = FALSE,\n          treeheight_col = 20,\n          color = colorRampPalette(c(\"blue\", \"white\", \"red\"))(50),\n          main = \"Housing Price Heatmap\",\n          cellwidth = 16,\n          cellheight = 8,\n          angle_col = 45)\n\n\n\n\n\n\n\n\nFrom this heatmap you could roughly see housing price actually followed different trending at different areas. Now make an App to enable end users to visualize our data set!"
  }
]